version: '3' # Версия спецификации docker-compose

services: # Раздел описания сервисов
  web: # Описываем сервис нашего веб-приложения
    container_name: web-udw-avia-dev # Наименование контейнера приложения
    build:
      context: ./app # Папка, где находится Dockerfile, из которого будет создан контейнер
    volumes:
      - web-static-dev:/usr/src/app/static # Вынесение статики в отдельный том
    env_file:
      - ./app/.env # Указание файла с переменными окружения
    environment:
      - NGINX_PORT
      - DB_NAME=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_HOST=db
      - DB_PORT=5432
    depends_on:
      - db # Запуск контейнера, после успешного запуска контейнера с базой данных
    networks:
      - udw-avia-dev # Подключение контейнера к общей сети udw-avia-dev
    # создание и накатывание миграций, сбор статики и запуск сервера разработки
    command: bash -c "python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn config.wsgi:application --bind 0.0.0.0:8000"

  nginx: # Описываем сервис с веб-сервером nginx
    container_name: nginx-udw-avia-dev # Наименование контейнера
    image: nginx:latest # Официальный образ nginx, на базе которого будет создаваться контейнер
    ports:
      - ${NGINX_PORT:-8000}:9000 # Проброс портов. Если есть переменная окружения NGINX_PORT, то будет взято её значение, иначе будет 8000
    depends_on:
      - web # Запуск контейнера, после успешного запуска контейнера с веб-приложением
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf:ro # Проброс файла с описанием виртуальных хостов nginx
      - web-static-dev:/usr/src/app/static # Проброс тома со статикой, что бы веб-сервер мог её кэшировать
    networks:
      - udw-avia-dev # Подключение контейнера к общей сети udw-avia-dev

  db: # Описываем сервис с базой данных
    container_name: db-udw-avia-dev # Наименование контейнера
    image: postgres:14-alpine # Официальный образ postgres, на базе которого будет создаваться контейнер
    environment:
      - POSTGRES_DB
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    networks:
      - udw-avia-dev # Подключение контейнера к общей сети udw-avia-dev
    volumes:
      - postgres-data-dev:/var/lib/postgresql/data/ # Проброс данных БД на отдельный том, для надежности хранения данных

volumes: # Раздел с томами, используемыми в сервисах
  web-static-dev:
  postgres-data-dev:

networks: # Раздел с сетями, используемыми в сервисах
  udw-avia-dev:
    driver: bridge
